CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

# project name
PROJECT(AstroMenace)

# depends
IF (NOT APPLE)
FIND_PACKAGE(X11 REQUIRED)
SET(ALL_LIBRARIES ${ALL_LIBRARIES} ${X11_LIBRARIES})
ENDIF (NOT APPLE)


# includes ./share/cmake/FindSDL2.cmake
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/share/cmake)

FIND_PACKAGE(SDL2 REQUIRED)
IF(SDL2_FOUND)
	INCLUDE_DIRECTORIES(${SDL2_INCLUDE_DIR})
	SET(ALL_LIBRARIES ${ALL_LIBRARIES} ${SDL2_LIBRARY})
ELSE(SDL2_FOUND)
	MESSAGE(FATAL_ERROR "libSDL2 not found")
ENDIF(SDL2_FOUND)

FIND_PACKAGE(OpenGL REQUIRED)
IF(OPENGL_FOUND)
	INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_DIR})
	SET(ALL_LIBRARIES ${ALL_LIBRARIES} ${OPENGL_gl_LIBRARY})
ELSE(OPENGL_FOUND)
	MESSAGE(FATAL_ERROR "OpenGL not found")
ENDIF(OPENGL_FOUND)

FIND_PACKAGE(OpenAL REQUIRED)
SET(ALL_LIBRARIES ${ALL_LIBRARIES} ${OPENAL_LIBRARY})


# GLU lib + header (GLU - part of OpenGL framework in MacOSX)

IF (NOT APPLE)
FIND_LIBRARY(GLU_LIBRARY GLU)
IF(GLU_LIBRARY)
	MESSAGE(STATUS "Found GLU: ${GLU_LIBRARY}")
	SET(ALL_LIBRARIES ${ALL_LIBRARIES} ${GLU_LIBRARY})
ELSE(GLU_LIBRARY)
	MESSAGE(FATAL_ERROR "GLU not found")
ENDIF(GLU_LIBRARY)
FIND_PATH(GLU_INCLUDE_DIR GL/glu.h
 	HINTS
	$ENV{GLUTDIR}
	$ENV{GLU_PATH}
 	PATHS
 	PATH_SUFFIXES include/GL include)
IF(GLU_INCLUDE_DIR)
	MESSAGE(STATUS "Found GLU headers: ${GLU_INCLUDE_DIR}")
	INCLUDE_DIRECTORIES(${GLU_INCLUDE_DIR})
ELSE(GLU_INCLUDE_DIR)
	MESSAGE(FATAL_ERROR "GLU headers not found")
ENDIF(GLU_INCLUDE_DIR)
ENDIF (NOT APPLE)


# alut lib + header

FIND_LIBRARY(ALUT_LIBRARY alut)
IF(ALUT_LIBRARY)
	MESSAGE(STATUS "Found alut: ${ALUT_LIBRARY}")
	SET(ALL_LIBRARIES ${ALL_LIBRARIES} ${ALUT_LIBRARY})
ELSE(ALUT_LIBRARY)
	MESSAGE(FATAL_ERROR "alut not found")
ENDIF(ALUT_LIBRARY)
FIND_PATH(ALUT_INCLUDE_DIR alut.h
 	HINTS
	$ENV{ALUTDIR}
	$ENV{ALUT_PATH}
 	PATHS
 	PATH_SUFFIXES include/AL include)
IF(ALUT_INCLUDE_DIR)
	MESSAGE(STATUS "Found alut headers: ${ALUT_INCLUDE_DIR}")
	INCLUDE_DIRECTORIES(${ALUT_INCLUDE_DIR})
ELSE(ALUT_INCLUDE_DIR)
	MESSAGE(FATAL_ERROR "alut headers not found")
ENDIF(ALUT_INCLUDE_DIR)


# ogg lib + header

FIND_LIBRARY(OGG_LIBRARY ogg)
IF(OGG_LIBRARY)
	MESSAGE(STATUS "Found ogg: ${OGG_LIBRARY}")
	SET(ALL_LIBRARIES ${ALL_LIBRARIES} ${OGG_LIBRARY})
ELSE(OGG_LIBRARY)
	MESSAGE(FATAL_ERROR "ogg not found")
ENDIF(OGG_LIBRARY)
FIND_PATH(OGG_INCLUDE_DIR ogg/ogg.h
	HINTS
	$ENV{OGGDIR}
        $ENV{OGG_PATH}
 	PATHS
 	PATH_SUFFIXES include)
IF(OGG_INCLUDE_DIR)
	MESSAGE(STATUS "Found ogg headers: ${OGG_INCLUDE_DIR}")
	INCLUDE_DIRECTORIES(${OGG_INCLUDE_DIR})
ELSE(OGG_INCLUDE_DIR)
	MESSAGE(FATAL_ERROR "ogg headers not found")
ENDIF(OGG_INCLUDE_DIR)


# vorbis lib

FIND_LIBRARY(VORBIS_LIBRARY vorbis)
IF(VORBIS_LIBRARY)
	MESSAGE(STATUS "Found vorbis: ${VORBIS_LIBRARY}")
	SET(ALL_LIBRARIES ${ALL_LIBRARIES} ${VORBIS_LIBRARY})
ELSE(VORBIS_LIBRARY)
	MESSAGE(FATAL_ERROR "vorbis not found")
ENDIF(VORBIS_LIBRARY)


# vorbisfile lib + header

FIND_LIBRARY(VORBISFILE_LIBRARY vorbisfile)
IF(VORBISFILE_LIBRARY)
	MESSAGE(STATUS "Found vorbisfile: ${VORBISFILE_LIBRARY}")
	SET(ALL_LIBRARIES ${ALL_LIBRARIES} ${VORBISFILE_LIBRARY})
ELSE(VORBISFILE_LIBRARY)
	MESSAGE(FATAL_ERROR "vorbisfile not found")
ENDIF(VORBISFILE_LIBRARY)
FIND_PATH(VORBISFILE_INCLUDE_DIR vorbis/vorbisfile.h
	HINTS
        $ENV{VORBISFILEDIR}
        $ENV{VORBISFILE_PATH}
        $ENV{VORBISDIR}
        $ENV{VORBIS_PATH}
 	PATHS
 	PATH_SUFFIXES vorbis include)
IF(VORBISFILE_INCLUDE_DIR)
	MESSAGE(STATUS "Found vorbisfile headers: ${VORBISFILE_INCLUDE_DIR}")
	INCLUDE_DIRECTORIES(${VORBISFILE_INCLUDE_DIR})
ELSE(VORBISFILE_INCLUDE_DIR)
	MESSAGE(FATAL_ERROR "vorbisfile headers not found")
ENDIF(VORBISFILE_INCLUDE_DIR)


# freetype lib + header

FIND_LIBRARY(FREETYPE_LIBRARY freetype)
IF(FREETYPE_LIBRARY)
	MESSAGE(STATUS "Found freetype: ${FREETYPE_LIBRARY}")
	SET(ALL_LIBRARIES ${ALL_LIBRARIES} ${FREETYPE_LIBRARY})
ELSE(FREETYPE_LIBRARY)
	MESSAGE(FATAL_ERROR "freetype not found")
ENDIF(FREETYPE_LIBRARY)
FIND_PATH(FREETYPE_INCLUDE_DIR_freetype2 freetype/config/ftheader.h
	HINTS
	$ENV{FREETYPE_DIR}/include/freetype2
	PATHS
	PATH_SUFFIXES freetype2)
IF(FREETYPE_INCLUDE_DIR_freetype2)
	MESSAGE(STATUS "Found freetype2 headers: ${FREETYPE_INCLUDE_DIR_freetype2}")
	INCLUDE_DIRECTORIES(${FREETYPE_INCLUDE_DIR_freetype2})
ELSE(FREETYPE_INCLUDE_DIR_freetype2)
	EXEC_PROGRAM("freetype-config" ARGS "--cflags" OUTPUT_VARIABLE freetype2_CFLAGS)
	IF(freetype2_CFLAGS)
		MESSAGE(STATUS "Found freetype2 cflags: ${freetype2_CFLAGS}")
		ADD_DEFINITIONS(${freetype2_CFLAGS})
	ELSE(freetype2_CFLAGS)
		MESSAGE(FATAL_ERROR "freetype2 headers not found")
	ENDIF(freetype2_CFLAGS)
ENDIF(FREETYPE_INCLUDE_DIR_freetype2)


# fontconfig lib + header

IF (NOT APPLE)
FIND_LIBRARY(FONTCONFIG_LIBRARY fontconfig)
IF(FONTCONFIG_LIBRARY)
	MESSAGE(STATUS "Found fontconfig: ${FONTCONFIG_LIBRARY}")
	SET(ALL_LIBRARIES ${ALL_LIBRARIES} ${FONTCONFIG_LIBRARY})
ELSE(FONTCONFIG_LIBRARY)
	MESSAGE(STATUS "fontconfig library not found, fontconfig compilation feature disabled.")
ENDIF(FONTCONFIG_LIBRARY)
FIND_PATH(FONTCONFIG_INCLUDE_DIR_fontconfig fontconfig/fontconfig.h
	HINTS
	PATHS
	PATH_SUFFIXES fontconfig)
IF(FONTCONFIG_INCLUDE_DIR_fontconfig)
	MESSAGE(STATUS "Found fontconfig headers: ${FONTCONFIG_INCLUDE_DIR_fontconfig}")
	INCLUDE_DIRECTORIES(${FONTCONFIG_INCLUDE_DIR_fontconfig})
ELSE(FONTCONFIG_INCLUDE_DIR_fontconfig)
	MESSAGE(STATUS "fontconfig headers not found, fontconfig compilation feature disabled.")
ENDIF(FONTCONFIG_INCLUDE_DIR_fontconfig)
ENDIF (NOT APPLE)


# Use C++11.
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-exceptions")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti")

# Warnings
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wnon-virtual-dtor")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wshadow")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Winit-self")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wredundant-decls")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wcast-align")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Winline")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wunreachable-code")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wmissing-include-dirs")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wmain")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wextra")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")

#  AppleClang 8.1.0.8020042 don't support this flag
IF (NOT (APPLE AND ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")))
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wzero-as-null-pointer-constant")
ENDIF (NOT (APPLE AND ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")))

#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wfloat-conversion") # part of -Wconversion
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wconversion")
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Weffc++")
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wmissing-declarations")
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wundef")
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wfloat-equal")
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wswitch-default")
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wswitch-enum")

# the compiler flags for compiling C++ sources
MESSAGE(STATUS "CMAKE_CXX_FLAGS: " ${CMAKE_CXX_FLAGS})


# sources
# "src/*.h" added in order to have mixed cpp/h files overview in QtCreator's
# Projects list, that based on FILE for cmake projects.
FILE(GLOB_RECURSE astromenace_SRCS src/*.cpp src/*.h)
SET(astromenace_DATA "${CMAKE_CURRENT_LIST_DIR}/gamedata/")
MESSAGE("Game data dir: ${astromenace_DATA}")

# targets
IF(DATADIR)
	ADD_DEFINITIONS(-DDATADIR=\\"${DATADIR}\\")
ENDIF(DATADIR)
IF(FONTCONFIG_LIBRARY AND FONTCONFIG_INCLUDE_DIR_fontconfig)
	ADD_DEFINITIONS(-Dfontconfig_detected_by_cmake)
ENDIF(FONTCONFIG_LIBRARY AND FONTCONFIG_INCLUDE_DIR_fontconfig)

ADD_DEFINITIONS(-DNDEBUG)
ADD_DEFINITIONS("-O2")
ADD_EXECUTABLE(astromenace ${astromenace_SRCS})
TARGET_LINK_LIBRARIES(astromenace ${ALL_LIBRARIES})

# generate game data file (gamedata.vfs)
ADD_CUSTOM_COMMAND(
	TARGET astromenace
	POST_BUILD
	COMMAND ${CMAKE_BINARY_DIR}/astromenace --pack --rawdata=${astromenace_DATA}
)
